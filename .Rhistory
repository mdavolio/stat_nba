#return(lm)
}
vif.check(table.b1, y)
vif.check <- function(frame, pred){
frame <- as.data.frame(frame)
pred <- toString(pred)
#char <- as.character(pred)
varslist <- names(frame != pred)
varslist[!names(varslist)==char]
return(varslist)
#lm <- lm(pred ~ ., data = frame, header = T) # Need to not include pred variable
#return(lm)
}
vif.check(table.b1, y)
vif.check <- function(frame, pred){
frame <- as.data.frame(frame)
pred <- toString(pred)
#char <- as.character(pred)
varslist <- names(frame != pred)
#varslist[!names(varslist)==char]
return(varslist)
#lm <- lm(pred ~ ., data = frame, header = T) # Need to not include pred variable
#return(lm)
}
vif.check(table.b1, y)
?vif
lm <- lm(y ~ ., table.b1)
lm
library(car)
vif(lm)
vifs <- vif(lm)
vifs
max(vifs)
maxvif <- max(vifs)
vifs == maxvif
maxVar <- vifs == maxvif
varslist <- names(table.b1)
varslist
varslist <- varslist[-'y']
varslist <- varslist[-1]
varslist
varslist <- varslist[-maxVar]
varslist
maxVar
data(table.b1)
attach(table.b1)
table.b1
library(car)
lm <- lm(y ~ ., table.b1)
varslist <- names(table.b1)
varslist <- varslist[-1]
vifs <- vif(lm)
maxvif <- max(vifs)
maxVar <- vifs == maxvif
maxVar
varslist
for(i in varslist){
if maxvif[i] == T{
del <- varslist[i]
}
}
for(i in seq(varslist)){
if maxvif[i] == T{
del <- varslist[i]
}
}
for(i in seq(varslist)){
if (maxvif[i] == T){
del <- varslist[i]
}
}
maxvif
maxVar
for(i in seq(varslist)){
if (maxVar[i] == T){
del <- varslist[i]
}
}
varslist <- varslist[-del]
varslist <- varslist[-'del']
varslist <- varslist[!'del']
varslist <- varslist[!del]
varslist <- varslist[!= del]
for(i in seq(varslist)){
if (maxVar[i] == T){
del <- i
}
}
varslist <- varslist[-del]
varslist
vif.check <- function(frame, pred){
library(car) # for vif
frame <- as.data.frame(frame)
pred <- toString(pred)
#char <- as.character(pred)
varslist <- names(frame != pred)
#varslist[!names(varslist)==char]
return(varslist)
lm <- lm(pred ~ varslist, data = frame, header = T) # Need to not include pred variable
#return(lm)
vifs <- vif(lm)
maxVIF <- max(vifs)
while (maxVIF > 5){
maxVar <- vifs == maxVIF
for (i in seq(varslist)){
if(maxVar[i] == T){
del = i}
varslist <- varslist[-del]
lm <- lm(pred ~ varslist, data = frame)
vifs <- vif(lm)
maxVIF <- max(vifs)
}
}
}
vif.check(table.b1, y)
vif.check <- function(frame, pred){
library(car) # for vif
frame <- as.data.frame(frame)
pred <- toString(pred)
#char <- as.character(pred)
varslist <- names(frame != pred)
#varslist[!names(varslist)==char]
return(varslist)
lm <- lm(pred ~ varslist, data = frame, header = T) # Need to not include pred variable
#return(lm)
vifs <- vif(lm)
maxVIF <- max(vifs)
while (maxVIF > 5){
maxVar <- vifs == maxVIF
for (i in seq(varslist)){
if(maxVar[i] == T){
del = i}
varslist <- varslist[-del]
lm <- lm(pred ~ varslist, data = frame)
vifs <- vif(lm)
maxVIF <- max(vifs)
}
}
return(lm)
}
vif.check(table.b1, y)
library(car) # for vif
frame <- as.data.frame(table.b1)
pred <- y
varslist <- names(frame)
varslist == pred
pred <- toString(y)
varslist <- names(frame)
varslist == pred
char <= as.character(y)
char <- as.character(y)
varslist == char
pred <- toString(y)
y
library(car) # for vif
library(MPV)
data(table.b1)
attach(table.b1)
table.b1
frame <- as.data.frame(table.b1)
pred <- toString(y)
pred
pred <- toString(name(table.b1[,y])
)
pred <- toString(names(table.b1[,y]))
pred <- toString(names(table.b1[,'y']))
pred
View(table.b1)
library(MPV)
data(table.b1)
attach(table.b1)
table.b1
library(car) # for vif
pred <- toString(y)
y
vif.check <- function(frame, pred){
library(car) # for vif
frame <- as.data.frame(frame)
pred <- toString(pred)
varslist <- names(frame)
varslist == pred
# return(varslist)
lm <- lm(pred ~ varslist, data = frame, header = T) # Need to not include pred variable
#return(lm)
vifs <- vif(lm) # store VIFs of original function
maxVIF <- max(vifs) # find predictor that has maximum of VIF
while (maxVIF > 5){ # VIF that is too high is deemed to be 5
maxVar <- vifs == maxVIF # create boolean vector of predictors with max if being T
for (i in seq(varslist)){ # cycle through variable list
if(maxVar[i] == T){ # find varible with max vif
del = i} # index max vif variable
varslist <- varslist[-del] # remove highest vif variable
lm <- lm(pred ~ varslist, data = frame) # create new linear model
vifs <- vif(lm) # check new vifs
maxVIF <- max(vifs) # find maximum vif, if max >5 will continue
}
}
return(lm)
}
vif.check(table.b1, y)
pred <- toString(y)
y
pred <- toString(colname(y))
pred <- toString(colname(frame$y))
pred <- toString(colnames(frame$y))
pred <- toString(colnames(frame$[,'y']))
pred <- toString(colnames(frame[,'y']))
pred <- toString(colnames(frame)['y'])
pred
vif.check <- function(frame, pred){
library(car) # for vif
frame <- as.data.frame(frame)
pred <- toString(pred)
varslist <- names(frame)
varslist <- varslist[-names(varslist)[pred]]
# return(varslist)
lm <- lm(pred ~ varslist, data = frame, header = T) # Need to not include pred variable
#return(lm)
vifs <- vif(lm) # store VIFs of original function
maxVIF <- max(vifs) # find predictor that has maximum of VIF
while (maxVIF > 5){ # VIF that is too high is deemed to be 5
maxVar <- vifs == maxVIF # create boolean vector of predictors with max if being T
for (i in seq(varslist)){ # cycle through variable list
if(maxVar[i] == T){ # find varible with max vif
del = i} # index max vif variable
varslist <- varslist[-del] # remove highest vif variable
lm <- lm(pred ~ varslist, data = frame) # create new linear model
vifs <- vif(lm) # check new vifs
maxVIF <- max(vifs) # find maximum vif, if max >5 will continue
}
}
return(lm)
}
vif.check(table.b1, y)
vif.check <- function(frame, pred){
library(car) # for vif
frame <- as.data.frame(frame)
pred <- toString(pred)
varslist <- names(frame)
return(names(varslist))
# return(varslist)
#
# lm <- lm(pred ~ varslist, data = frame, header = T) # Need to not include pred variable
# #return(lm)
#
# vifs <- vif(lm) # store VIFs of original function
#
# maxVIF <- max(vifs) # find predictor that has maximum of VIF
#
# while (maxVIF > 5){ # VIF that is too high is deemed to be 5
#   maxVar <- vifs == maxVIF # create boolean vector of predictors with max if being T
#   for (i in seq(varslist)){ # cycle through variable list
#     if(maxVar[i] == T){ # find varible with max vif
#       del = i} # index max vif variable
#   varslist <- varslist[-del] # remove highest vif variable
#   lm <- lm(pred ~ varslist, data = frame) # create new linear model
#   vifs <- vif(lm) # check new vifs
#   maxVIF <- max(vifs) # find maximum vif, if max >5 will continue
#   }
# }
#
# return(lm)
#
}
library(MPV)
data(table.b1)
attach(table.b1)
table.b1
vif.check(table.b1, y)
vif.check <- function(frame, pred){
library(car) # for vif
frame <- as.data.frame(frame)
pred <- toString(pred)
varslist <- names(frame)
return(varslist[pred])
# return(varslist)
#
# lm <- lm(pred ~ varslist, data = frame, header = T) # Need to not include pred variable
# #return(lm)
#
# vifs <- vif(lm) # store VIFs of original function
#
# maxVIF <- max(vifs) # find predictor that has maximum of VIF
#
# while (maxVIF > 5){ # VIF that is too high is deemed to be 5
#   maxVar <- vifs == maxVIF # create boolean vector of predictors with max if being T
#   for (i in seq(varslist)){ # cycle through variable list
#     if(maxVar[i] == T){ # find varible with max vif
#       del = i} # index max vif variable
#   varslist <- varslist[-del] # remove highest vif variable
#   lm <- lm(pred ~ varslist, data = frame) # create new linear model
#   vifs <- vif(lm) # check new vifs
#   maxVIF <- max(vifs) # find maximum vif, if max >5 will continue
#   }
# }
#
# return(lm)
#
}
library(MPV)
data(table.b1)
attach(table.b1)
table.b1
vif.check(table.b1, y)
vif.check <- function(frame, pred){
library(car) # for vif
frame <- as.data.frame(frame)
pred <- toString(pred)
varslist <- names(frame)
return(varslist[[pred]])
# return(varslist)
#
# lm <- lm(pred ~ varslist, data = frame, header = T) # Need to not include pred variable
# #return(lm)
#
# vifs <- vif(lm) # store VIFs of original function
#
# maxVIF <- max(vifs) # find predictor that has maximum of VIF
#
# while (maxVIF > 5){ # VIF that is too high is deemed to be 5
#   maxVar <- vifs == maxVIF # create boolean vector of predictors with max if being T
#   for (i in seq(varslist)){ # cycle through variable list
#     if(maxVar[i] == T){ # find varible with max vif
#       del = i} # index max vif variable
#   varslist <- varslist[-del] # remove highest vif variable
#   lm <- lm(pred ~ varslist, data = frame) # create new linear model
#   vifs <- vif(lm) # check new vifs
#   maxVIF <- max(vifs) # find maximum vif, if max >5 will continue
#   }
# }
#
# return(lm)
#
}
library(MPV)
data(table.b1)
attach(table.b1)
table.b1
vif.check(table.b1, y)
pred <- toString(names(table.b1[,'y']))
vif.check <- function(frame, pred){
library(car) # for vif
frame <- as.data.frame(frame)
pred <- toString(names(table.b1[,'y']))
varslist <- names(frame)
return(varslist[[pred]])
# return(varslist)
#
# lm <- lm(pred ~ varslist, data = frame, header = T) # Need to not include pred variable
# #return(lm)
#
# vifs <- vif(lm) # store VIFs of original function
#
# maxVIF <- max(vifs) # find predictor that has maximum of VIF
#
# while (maxVIF > 5){ # VIF that is too high is deemed to be 5
#   maxVar <- vifs == maxVIF # create boolean vector of predictors with max if being T
#   for (i in seq(varslist)){ # cycle through variable list
#     if(maxVar[i] == T){ # find varible with max vif
#       del = i} # index max vif variable
#   varslist <- varslist[-del] # remove highest vif variable
#   lm <- lm(pred ~ varslist, data = frame) # create new linear model
#   vifs <- vif(lm) # check new vifs
#   maxVIF <- max(vifs) # find maximum vif, if max >5 will continue
#   }
# }
#
# return(lm)
#
}
library(MPV)
data(table.b1)
attach(table.b1)
table.b1
vif.check(table.b1, y)
varslist <- names(frame)
varslist
frame <- as.data.frame(table.b1)
pred <- toString(colnames(frame)['y'])
pred <- toString(names(table.b1[,'y']))
char <- as.character(y)
varslist <- names(frame)
varslist
varslist[pred]
varslist[[pred]
]
pred
y <- c(1,2,3,1,651,48,16,789,12,15,456,321,45,15,123,54)
x1 <- c(51,4,12,84,65,13,48,1,-45,15,-78,15-45,123)
x1 <- c(51,4,12,84,65,13,48,1,-45,15,-78,15-45,123,56,148,21)
x2 <- c(57,21,-4,5,32,-45,1,0,46,84,123,789,54,1,50,557)
x3 <- c(1,0,1,0,1,0,1,0,1,1,1,0,0,1,0)
x3 <- c(1,0,1,0,1,0,1,0,1,1,1,0,0,1,0,1)
test <- as.data.frame(y,x1,x2,x3)
test <- as.data.frame(y)
y <- as.data.frame(1,2,3,1,651,48,16,789,12,15,456,321,45,15,123,54)
y <- c(1,2,3,1,651,48,16,789,12,15,456,321,45,15,123,54)
y <- as.data.frame(y)
x1 <- as.data.frame(x1)
x2 <- as.data.frame(x2)
x3 <- as.data.frame(x3)
test <- cbind(y, x1, x2, x3)
View(test)
test.lm.1 <- lm(y ~ x1 + x3, data = test)
test.lm.2 <- lm(y ~ . -x2, data = test)
test.lm.1
test.lm.2
temp <- c(53,56,57,63,66,67,67,67,68,69,70,70,70,70,72,73,75,75,76,76,78,79,80,81)
temp <- c(53,56,57,63,66,67,67,67,68,69,70,70,70,70,72,73,75,75,76,76,78,79,80,81)
failure <- c(1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0)
table.13.25 <- data.frame(temp, failure)
failure.lm <- glm(failure ~ temp, data = table.13.25)
failure.lm
plot(failure.lm)
plot(failure.lm)
plot(table.13.25)
View(table.13.25)
curve(predict(failure.lm,table.13.25,type="resp"),add=TRUE)
curve(predict(failure.lm,data.frame(temp=x),type="resp"),add=TRUE)
points(temp,fitted(failure.lm),pch=20)
install.packages('fmsb')
library(fsmb)
temp.c <- data.frame(temp <- 50)
predict(failure.lm, temp.c)
temp.d <- data.frame(temp <- 75)
predict(failure.lm, temp.d)
temp.e <- data.frame(temp <- 31)
predict(failure.lm, temp.e)
failure.lm <- glm(failure ~ temp + I(temp**2), data = table.13.25)
failure.lm
setwd("~/Fall 2016/STAT 6021/stat_nba")
library(readr)
library(stringr)
all_nba <- read_csv('all_pro.csv')
all_nba_2 <- data.frame()
count = 1
for(i in 1:nrow(all_nba)){
for(k in 4:8){
all_nba_2[count,1] <- all_nba[i, 1]
all_nba_2[count,2] <- all_nba[i, 2]
all_nba_2[count,3] <- all_nba[i, 3]
all_nba_2[count, 4] <- all_nba[i,k]
count = count + 1
}
}
all_nba_2[,4:6] <- as.data.frame(str_split_fixed(all_nba_2$V4, " ", 3))
colnames(all_nba_2) <- c('Year','del','Team','First','Last','Pos')
drops <- ('del')
all_nba_2 <- all_nba_2[,!(names(all_nba_2) %in% drops)]
View(all_nba_2)
all_nba_2$Year <- substr(all_nba_2$Year, 0, 4)
all_nba_2$Year <- all_nba_2$Year + 1
all_nba_2$Year <- as.numeric(all_nba_2$Year) + 1
all_nba_final <- subset(all_nba_2$Year > 1988)
all_nba_final <- subset(all_nba_2, Year > 1988)
View(all_nba_final)
all_nba_final[193, 'Last'] <- 'World Peace'
all_nba_final[193, 'Pos'] <- 'F'
typeof(all_nba_final$Last)
all_nba_2$Team <- as.character(all_nba_2$Team)
all_nba_2$Last <- as.character(all_nba_2$Last)
all_nba_2$First <- as.character(all_nba_2$First)
all_nba_final[193, 'Last'] <- 'World Peace'
typeof(all_nba_final$Last)
all_nba_2[] <- lapply(all_nba_2, as.character)
typeof(all_nba_final$Last)
all_nba_final <- subset(all_nba_2, Year > 1988)
typeof(all_nba_final$Last)
all_nba_final[193, 'Last'] <- 'World Peace'
all_nba_final[193, 'Pos'] <- 'F'
list.files()
library(readr)
library(stringr)
box_scores <- read_csv('All_player_data.csv')
View(box_scores)
names(box_scores)
duplicates <- ('Age_y','Tm_y','G_y','MP_y','Pos_y')
duplicates <- c('Age_y','Tm_y','G_y','MP_y','Pos_y')
box_scores <- box_scores[,!(names(box_scores) %in% duplicates)]
box_scores <- box_scores[,-1]
box_scores <- box_scores[,!(names(box_scores) %in% empty)]
empty <- c('blnk','blnk2')
box_scores <- box_scores[,!(names(box_scores) %in% empty)]
all_nba_final$Name <- paste(all_nba_final$First, all_nba_final$Last)
View(all_nba_final)
drops <- c('First','Last')
all_nba_final <- all_nba_final[,!(names(all_nba_final) %in% drops)]
View(all_nba_final)
names(all_nba_final)
names(box_scores)
colnames(box_scores) <- c('Year','Name','Pos','Age','Team','G','GS','MP')
names(box_scores)
newnames <- c('Year','Name','Pos','Age','Team','G','GS','MP')
library(readr)
library(stringr)
# import csv file
box_scores <- read_csv('All_player_data.csv')
# remove duplicate columns
duplicates <- c('Age_y','Tm_y','G_y','MP_y','Pos_y')
box_scores <- box_scores[,!(names(box_scores) %in% duplicates)]
# remove empty columns
box_scores <- box_scores[,-1]
empty <- c('blnk','blnk2')
box_scores <- box_scores[,!(names(box_scores) %in% empty)]
names(box_scores)
oldnames <- c('season_end','player','Pos_x','Age_x','Tm_x','G_x','MP_x')
newnames <- c('Year','Name','Pos','Age','Team','G','MP')
setnames(box_Scores, oldnames, newnames)
library(data.table)
setnames(box_Scores, oldnames, newnames)
setnames(box_scores, oldnames, newnames)
names(box_scores)
